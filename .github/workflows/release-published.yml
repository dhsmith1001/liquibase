name: Release Published

permissions:
  contents: write
  packages: write
  actions: write
  id-token: write
  pull-requests: write
  issues: write

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: "Release Tag"
        required: true
      dry_run:
        description: "Flag to indicate if the workflow is triggered to create a dry-run release"
        required: false
        type: boolean
        default: false
      dry_run_release_id:
        description: "The release id of the dry-run release"
        required: false
        type: string
      dry_run_zip_url:
        description: "URL of the dry-run zip release"
        required: false
        type: string
      dry_run_tar_gz_url:
        description: "URL of the dry-run tar.gz release"
        required: false
        type: string
      dry_run_branch_name:
        description: "The branch name of the dry-run"
        required: false
        type: string
  workflow_call:
    inputs:
      tag:
        description: "Release Tag"
        required: true
        type: string
      dry_run:
        description: "Flag to indicate if the workflow is triggered to create a dry-run release"
        required: true
        type: boolean
        default: false
      dry_run_release_id:
        description: "The release id of the dry-run release"
        required: false
        type: string
      dry_run_zip_url:
        description: "URL of the dry-run zip release"
        required: false
        type: string
      dry_run_tar_gz_url:
        description: "URL of the dry-run tar.gz release"
        required: false
        type: string
      dry_run_branch_name:
        description: "The branch name of the dry-run"
        required: false
        type: string
env:
  MAVEN_VERSION: "3.9.2"
jobs:
  setup:
    name: Setup
    runs-on: ubuntu-22.04
    outputs:
      tag: ${{ steps.collect-data.outputs.tag }}
      version: ${{ steps.collect-data.outputs.version }}
      ref_branch: ${{ steps.ref-branch.outputs.branch }}
      dry_run_branch_name: ${{ inputs.dry_run_branch_name }}
      latestMergeSha: ${{ steps.get-sha.outputs.latestMergeSha }}
      timeStamp: ${{ steps.get-timestamp.outputs.timeStamp }}
    steps:
      - name: Collect Data
        id: collect-data
        uses: actions/github-script@v8
        with:
          script: |
            let tag;
            if (context.payload.inputs) {
              tag = context.payload.inputs.tag;
            } else if ("${{ inputs.tag }}" != "") {
              tag = "${{ inputs.tag }}";
             } else {
              tag = context.payload.release.tag_name;
            }
            let version = tag.replace(/^v/, "");

            core.setOutput("tag", tag);
            core.setOutput("version", version);

      - run: |
          echo "Publishing version ${{ steps.collect-data.outputs.version }} from ${{ steps.collect-data.outputs.tag }}"

        # Use the 'release' branch for hotfix changes;
        # otherwise, use the 'master' branch for regular updates.
      - name: Ref branch to checkout
        id: ref-branch
        run: |
          if [ "${{ github.ref_name }}" == "release" ]; then
            echo "branch=release" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref_name }}" == "master" ]; then
            echo "branch=master" >> $GITHUB_OUTPUT
          else
            echo "branch=${{ inputs.dry_run_branch_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout the determined branch
        uses: actions/checkout@v5
        with:
          ref: ${{ steps.ref-branch.outputs.branch }}
          fetch-depth: 0

      - name: Get Latest Merge Commit SHA
        id: get-sha
        run: |
          latest_merge_sha=`(git rev-parse --short HEAD)`
          echo "latestMergeSha=${latest_merge_sha}" >> $GITHUB_OUTPUT

      - name: Get Timestamp
        id: get-timestamp
        run: |
          timestamp=`(date +'%Y-%m-%d %H:%M:%S %Z')`
          echo "timeStamp=${timestamp}" >> $GITHUB_OUTPUT

  manual_trigger_deployment:
    if: ${{ inputs.dry_run == false }}
    name: Manually trigger deployment
    needs: [setup]
    runs-on: ubuntu-22.04
    steps:
      - name: Get Version to deploy
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: filipelautert,rberezen,jnewton03,kristyldatical,sayaliM0412
          minimum-approvals: 2
          issue-title: "Deploying ${{ needs.setup.outputs.version }} to sonatype"
          issue-body: "Please approve or deny the deployment of version ${{ needs.setup.outputs.version }}"
          additional-approved-words: "lgtm,✅,👍,proceed,shipit,:shipit:"
          additional-denied-words: "stop,error,failed,fail,broken,:x:,👎"

  package:
    uses: liquibase/build-logic/.github/workflows/package.yml@DAT-20878-test
    needs: [setup]
    secrets: inherit
    with:
      groupId: "org.liquibase"
      artifactId: "liquibase"
      version: ${{ needs.setup.outputs.version }}
      dry_run: ${{ inputs.dry_run || false}}
      dry_run_zip_url: ${{ inputs.dry_run_zip_url || '' }}
      dry_run_tar_gz_url: ${{ inputs.dry_run_tar_gz_url || '' }}
      dry_run_release_id: ${{ inputs.dry_run_release_id || '' }}
      distribution: "liquibase"
      download_base_url: "https://github.com/liquibase/liquibase/releases/download"
      
